#!/usr/bin/env python3

import time
import sys
import sqlite3

# Data stored in sqlite so it can be shared easily
tracker_db = sqlite3.connect('tracker_data.db')
db = tracker_db.cursor()
db.execute('''CREATE TABLE IF NOT EXISTS trackers
                (name text, day date, value real)''')
tracker_db.commit()


def help(error_message = None):
    """Display usage information, exit program.
    
    Args:
        error_message: optional message to display to user
    """
    if error_message:
        print("Error: " + error_message + "\n")
    option = "  {:16} {}"
    help_text = [
        "Usage: tracker COMMAND [TRACKER_NAME] [ARGS]",
        "",
        "Commands:",
        option.format("help", "display this dialog"),
        option.format("update", "save new data to tracker"),
        option.format("list", "list available trackers"),
        option.format("delete", "remove tracker"),
        option.format("stats", "general statistics"),
        option.format("plot", "graphical representation"),
        "",
        option.format("Tracker Name", "title of data to track"),
        "",
        option.format("Args", "value to add to specified tracker"),
    ]
    print("\n".join(help_text))
    sys.exit(1)


def tracker_list():
    """Returns list of tracker names"""
    trackers = db.execute("SELECT DISTINCT name FROM trackers")
    names = [tup[0] for tup in trackers.fetchall()]
    return names


def tracker_exists(tracker, trackers = None):
    """Return whether given tracker exists

    Input:
        tracker: name of tracker to check
        trackers: optional list of trackers to determine existance with
    """
    if trackers is None:
        trackers = tracker_list()
    return tracker in trackers


def update_tracker(tracker_info):
    """Update tracker with new data

    Input:
        tracker_info: list in the form [tracker, data]
    """
    # Ensure tracker and data are provided
    if len(tracker_info) == 0:
        help("Must supply tracker and data to update")
    elif len(tracker_info) == 1:
        help("Must supply data to update '" + tracker_info[0] + "'")
    elif len(tracker_info) > 2:
        help("Too many arguments given for update command")

    # Ensure tracker exists
    tracker = tracker_info[0]
    if not tracker_exists(tracker):
        print("Tracker '" + tracker + "' not found")
        confirm = input("Type '" + tracker + "' to confirm creation: ").strip()
        if confirm != tracker:
            print("Update failed")
            sys.exit(1)

    # Ensure data is a number
    try:
        data = float(tracker_info[1])
    except ValueError:
        help("'" + tracker_info[1] + "' is not numerical, update failed")

    db.execute("INSERT INTO trackers VALUES (?, date('now'), ?)",
            (tracker, data))
    tracker_db.commit()
    print("'" + tracker + "' updated")


def display_list(args = None):
    """Lists available trackers"""
    trackers = tracker_list()
    if len(trackers) == 0:
        print("No trackers found")
    else:
        print("Current Trackers:")
        tracker_option = "\t{}"
        for t in trackers:
            print(tracker_option.format(t))


def delete_tracker(tracker):
    """Delete existing tracker

    Input:
        tracker_info: existing tracker
    """
    # Ensure tracker is provided
    if len(tracker) != 1:
        help("Must supply tracker name to delete")
    tracker = tracker[0]
    if not tracker_exists(tracker):
        help("Cannot delete unknown tracker '" + tracker + "'")

    # User must confirm tracker to delete all entries
    confirm = input("Type '" + tracker + "' to confirm: ").strip()
    if confirm == tracker:
        db.execute("DELETE FROM trackers WHERE name=:tracker", {"tracker": tracker})
        tracker_db.commit()
        print("Tracker named '" + tracker + "' deleted")
    else:
        print("Deletion cancelled")


def display_stats(trackers):
    """Show stats for trackers

    Input:
        trackers: list of tracker names, empty implies global stats
    """
    if len(trackers) == 0:
        # TODO display global stats
        # number of trackers, number of elements in each tracker
        print("Display gobal stats")
    else:
        # TODO verify all trackers exist
        for t in trackers:
            if not tracker_exists(t):
                help("Cannot show stats for unknown tracker '" + t + "'")
            print("Display stats for '" + t + "'")


def display_plot(tracker):
    """Show plot for a tracker

    Input:
        tracker: tracker name to plot
    """
    if len(tracker) != 1:
        help("Only a single tracker can be plotted")
    else:
        tracker = tracker[0]
        if not tracker_exists(tracker):
            help("Cannot show stats for unknown tracker '" + tracker + "'")
        print("Display plot for '" + tracker + "'")


def handle_command(args):
    """Handles execution of valid commands
    """
    command = args[0]
    # TODO handle all possible commands
    # Map to command's handler function
    # Remaining args are passed regardless, dealt with in handler
    handlers = {
        "update" : update_tracker,
        "list"   : display_list,
        "delete" : delete_tracker,
        "stats"  : display_stats,
        "plot"   : display_plot
    }
    handlers[command](args[1:])


def validate_input():
    """Ensures user input contains valid commands
    """
    args = [arg.lower() for arg in sys.argv[1:]]

    # available commands
    # TODO consider consolidating with help(), handle_command
    commands = ["update", "list", "delete", "stats", "plot"]

    if len(args) == 0:
        help("No command given\n")
    if args[0] in ["help", "usage"]:
        help()
    if args[0] not in commands:
        help("Invalid command: '" + args[0] + "'\n")

    handle_command(args)
    

if __name__ == '__main__':
    validate_input()
