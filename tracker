#!/usr/bin/env python3

import time
import sys

# DEBUG = True
DEBUG = False

def debug(*args):
    if DEBUG:
        print(args)

def help(error_message = None):
    """Display usage information, exit program.
    
    Args:
        error_message: optional message to display to user
    """
    if error_message:
        print("Error: " + error_message + "\n")
    option = "  {:16} {}"
    help_text = [
        "Usage: tracker COMMAND [TRACKER_NAME] [ARGS]",
        "",
        "Commands:",
        option.format("create", "add new tracker"),
        option.format("delete", "remove tracker"),
        option.format("list", "list available trackers"),
        option.format("update", "save new data to tracker"),
        option.format("stats", "general statistics"),
        option.format("plot", "graphical representation"),
        "",
        option.format("Tracker Name", "title of data to track"),
        "",
        option.format("Args", "value to add to specified tracker"),
    ]
    print("\n".join(help_text))
    sys.exit(1)


def tracker_list():
    """Returns list of tracker names"""
    # TODO retreive tracker names
    return ["pushups"]


def tracker_exists(tracker, trackers = None):
    """Return whether given tracker exists"""
    if trackers is None:
        trackers = tracker_list()
    return tracker in trackers


def create_tracker(tracker_info):
    """Create new tracker
    Ensures a tracker is provided and does not already exist
    """
    # Ensure tracker is provided
    if len(tracker_info) != 1:
        help("Must supply tracker name to create")
    tracker = tracker_info[0]
    if tracker_exists(tracker):
        help("Tracker '" + tracker + "' already exists")
    # TODO add tracker
    print("Tracker '" + tracker + "' created")


def delete_tracker(tracker_info):
    """Delete existing tracker
    Ensures a tracker is provided and exists
    """
    # Ensure tracker is provided
    if len(tracker_info) != 1:
        help("Must supply tracker name to delete")
    tracker = tracker_info[0]
    if not tracker_exists(tracker):
        help("Cannot delete unknown tracker '" + tracker + "'")

    confirm = input("Type '" + tracker + "' to confirm: ").strip()
    if confirm == tracker:
        print("Tracker named '" + tracker + "' deleted")
        # TODO delete tracker
    else:
        print("Deletion cancelled")


def display_list(args = None):
    """Lists available trackers"""
    trackers = tracker_list()
    if len(trackers) == 0:
        print("No trackers found")
    else:
        print("Current Trackers:")
        tracker_option = "\t{}"
        for t in trackers:
            print(tracker_option.format(t))


def update_tracker(tracker_info):
    """Update tracker with new data

    Input:
        tracker_info: list in the form [tracker, data]
    """
    # Ensure tracker and data are provided
    if len(tracker_info) == 0:
        help("Must supply tracker and data to update")
    elif len(tracker_info) == 1:
        help("Must supply data to update '" + tracker_info[0] + "'")

    tracker = tracker_info[0]
    # Ensure tracker is valid
    if not tracker_exists(tracker):
        help("Tracker '" + tracker + "' not found")
    print("Updating '" + tracker + "' with " + str(tracker_info[1:]))


def display_stats(trackers):
    """Show stats for trackers

    Input:
        trackers: list of tracker names, empty implies global stats
    """
    if len(trackers) == 0:
        # TODO display global stats
        # number of trackers, number of elements in each tracker
        print("Display gobal stats")
    else:
        # TODO verify all trackers exist
        for t in trackers:
            print("Display stats for '" + t + "'")


def display_plot(tracker):
    """Show plot for a tracker

    Input:
        tracker: tracker name to plot
    """
    if len(tracker) != 1:
        help("Only a single tracker can be plotted")
    else:
        print("Display plot for '" + tracker[0] + "'")


def handle_command(args):
    """Handles execution of valid commands
    """
    command = args[0]
    # TODO handle all possible commands
    # Map to command's handler function
    # Remaining args are passed regardless, dealt with in handler
    handlers = {
        "create" : create_tracker,
        "delete" : delete_tracker,
        "list"   : display_list,
        "update" : update_tracker,
        "stats"  : display_stats,
        "plot"   : display_plot
    }
    handlers[command](args[1:])


def validate_input():
    """Ensures user input contains valid commands
    """
    debug(sys._getframe().f_code.co_name)
    args = [arg.lower() for arg in sys.argv[1:]]
    debug("ARGS:", args)

    # available commands
    # TODO consider consolidating with help(), handle_command
    commands = ["create", "delete", "list", "update", "stats", "plot"]

    if len(args) == 0:
        help("No command given\n")
    if args[0] not in commands:
        help("Invalid command: '" + args[0] + "'\n")

    handle_command(args)
    
if __name__ == '__main__':
    validate_input()
