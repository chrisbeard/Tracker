#!/usr/bin/env python3

from datetime import datetime
import os
import sys
import sqlite3
import subprocess

# Data stored in sqlite so it can be shared easily
db_file = os.path.expanduser("~") + "/.tracker_data.db"
tracker_db = sqlite3.connect(db_file)
db = tracker_db.cursor()
db.execute('''CREATE TABLE IF NOT EXISTS trackers
                (name text, day date, value real)''')
tracker_db.commit()


def error(message = None):
    if message is not None:
        print(message)
    exit(1)

def help(command = None):
    """Display usage information, exit program.
    """
    if command is None:
        option = "   {:12} {}"
        help_text = [
            "Usage: tracker <command> [<args>]",
            "",
            "Available commands:",
            option.format("help",   "display this dialog"),
            option.format("update", "save data to tracker"),
            option.format("list",   "list available trackers"),
            option.format("show",   "display raw tracker data"),
            option.format("delete", "remove tracker"),
            option.format("stats",  "show statistics"),
            option.format("plot",   "show graph"),
            "",
            "Use 'tracker help <command>' for a command's detailed usage."
        ]
        print("\n".join(help_text))
    #TODO: display help for all commands
    #TODO: figure out how to format these nicely
    else:
        # commands = ["update", "list", "show", "delete", "stats", "plot"]
        usage = "   {}"
        desc  = "      {}"
        if command == "update":
            help_text = [
                "Update: command which adds (numerical) data to a tracker.",
                "",
                "Usage:",
                usage.format("tracker update <tracker> <data>"),
                usage.format("tracker update <tracker>"),
                "",
                "Description:",
                usage.format("tracker update <tracker> <data>"),
                desc.format("This form is shorthand for saving <data> to " +
                    "<tracker> for today's date."),
                "",
                usage.format("tracker update <tracker>"),
                desc.format("This form is used to set the value for an " +
                    "arbitrary date for <tracker>."),
                desc.format("The date must be in the format YYYY-MM-DD."),
                "",
                "Options:",
                usage.format("<tracker>"),
                desc.format("The name of the tracker to update, converted to lowercase."),
                desc.format("If <tracker> does not exist, you will be prompted to create it."),
                "",
                usage.format("<data>"),
                desc.format("The value to save to the tracker to update, must be numerical.")
            ]
        elif command == "list":
            help_text = [
                "List: displays a list of trackers which have been created",
                "",
                "Usage:",
                usage.format("tracker list")
            ]
        elif command == "show":
            help_text = [
                "Show: displays raw dates and values for a tracker",
                "",
                "Usage:",
                usage.format("tracker show <tracker>"),
                "",
                "Description:",
                usage.format("tracker show <tracker>"),
                desc.format("Displays all data for <tracker> in the form '<date> | <value>'."),
                desc.format("Note: <date> is formatted as 'YYYY-MM-DD'.")
            ]
        else:
            error("Invalid command: '{}'".format(command))
        print("\n".join(help_text))
    sys.exit(1)


def tracker_list():
    """Returns list of tracker names"""
    trackers = db.execute("SELECT DISTINCT name FROM trackers")
    names = [tup[0] for tup in trackers.fetchall()]
    return names


def tracker_exists(tracker, trackers = None):
    """Return whether given tracker exists

    Input:
        tracker: name of tracker to check
        trackers: optional list of trackers to determine existance with
    """
    if trackers is None:
        trackers = tracker_list()
    return tracker in trackers


def show_tracker(tracker_info):
    """Show data for list of trackers

    Input:
        tracker_info: list in the form [tracker, ...]
    """
    entry = "{} | {}"
    for t in tracker_info:
        if not tracker_exists(t):
            error("Cannot show data for unknown tracker '" + t + "'")
        query = "SELECT * FROM TRACKERS where name=:tracker"
        cursor = db.execute(query, {"tracker": t})
        results = cursor.fetchall()
        for r in results:
            print(entry.format(r[1], r[2]))


def update_tracker(tracker_info):
    """Update tracker with new data

    Input:
        tracker_info: list in the form [tracker, data]
    """
    # Ensure tracker and data are provided
    if len(tracker_info) == 0:
        error("Must supply tracker and data to update")
    elif len(tracker_info) > 2:
        error("Too many arguments given for update command")

    # Ensure tracker exists
    tracker = tracker_info[0]
    if not tracker_exists(tracker):
        print("Tracker '" + tracker + "' not found")
        confirm = input("Confirm '" + tracker + "' to create: ").strip()
        if confirm != tracker:
            error("Update failed")

    if len(tracker_info) == 1:
        date = None
        while not date:
            date = input("Provide date YYYY-MM-DD (leave blank for today): ").strip()
            if not date:
                date = datetime.today().date()
                break
            try:
                date = datetime.strptime(date, "%Y-%m-%d").date()
            except ValueError:
                print("Error: Invalid date provided")
                date = None
        data = input("Value: ").strip()
    else:
        data = tracker_info[1]
        date = datetime.today().date()

    # Ensure data is a number
    try:
        data = float(data)
    except ValueError:
        error("'" + data + "' is not numerical, update failed")
    # Update existing row for today's value if possible
    db.execute('''UPDATE trackers SET value = value + :data
                    WHERE name = :tracker AND day = :date''',
                    {"data": data, "tracker": tracker, "date": date})
    # Otherwise, insert a new row
    if not db.rowcount:
        db.execute("INSERT INTO trackers VALUES (?, ?, ?)",
                (tracker, date, data))
    tracker_db.commit()
    print("'" + tracker + "' updated")


def display_list(args = None):
    """Lists available trackers"""
    trackers = tracker_list()
    if len(trackers) == 0:
        print("No trackers found")
    else:
        print("Current Trackers:")
        tracker_option = "\t{}"
        for t in trackers:
            print(tracker_option.format(t))


def delete_tracker(tracker):
    """Delete existing tracker

    Input:
        tracker_info: existing tracker
    """
    # Ensure tracker is provided
    if len(tracker) != 1:
        error("Must supply tracker to delete")
    tracker = tracker[0]
    if not tracker_exists(tracker):
        error("Cannot delete unknown tracker '" + tracker + "'")

    # User must confirm tracker to delete all entries
    confirm = input("Type '" + tracker + "' to confirm: ").strip()
    if confirm == tracker:
        db.execute("DELETE FROM trackers WHERE name=:tracker", {"tracker": tracker})
        tracker_db.commit()
        print("Tracker '" + tracker + "' deleted")
    else:
        print("Deletion cancelled")


def display_stats(trackers):
    """Show stats for trackers

    Input:
        trackers: list of tracker names, empty implies global stats
    """
    if len(trackers) == 0:
        # number of trackers, number of elements in each tracker
        trackers = tracker_list()
        print(str(len(trackers)) + " tracker(s)")
        cursor = db.execute("SELECT * FROM trackers")
        entries = cursor.fetchall()
        print(str(len(entries)) + " total entries")

        for t in trackers:
            print()
            print(t)
            t_cursor = db.execute("SELECT * FROM trackers WHERE name=:name",
                    {'name': t})
            t_entries = cursor.fetchall()
            print("  " + str(len(t_entries)) + " entries")
    else:
        days = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
        for t in trackers:
            if not tracker_exists(t):
                error("Cannot show stats for unknown tracker '" + t + "'")
            query = "SELECT * FROM TRACKERS where name=:tracker"
            cursor = db.execute(query, {"tracker": t})
            results = cursor.fetchall()
            num_entries = len(results)
            counts = [0] * len(days)
            tally = [0] * len(days)
            mins = [None] * len(days)
            maxs = [None] * len(days)
            min_value = None
            max_value = None
            for r in results:
                count = r[2]
                day = datetime.strptime(r[1], "%Y-%m-%d").date()
                day_index = day.weekday()
                counts[day_index] += count
                tally[day_index] += 1
                if not min_value or min_value[0] > count:
                    min_value = (count, day)
                if not max_value or max_value[0] < count:
                    max_value = (count, day)
                if not mins[day_index] or count < mins[day_index]:
                    mins[day_index] = count
                if not maxs[day_index] or count > maxs[day_index]:
                    maxs[day_index] = count

            # format string for single data point
            point = "  {:3} -- {:,.3f}"

            print(t + ": " + str(num_entries) + " entries\n")

            # TODO: decide how to format output for better readability
            print(point.format("sum", sum(counts)))
            print(point.format("avg", sum(counts)/sum(tally)))
            print(point.format("min", min_value[0]) +
                    " (" + str(min_value[1]) + ")")
            print(point.format("min", min_value[0]) +
                    " (" + str(min_value[1]) + ")")

            print()

            # prepare min/max data for printing
            mins = [v if v else 0 for v in mins]
            maxs = [v if v else 0 for v in maxs]

            row = "{:40}{:40}"
            print(row.format("  Totals", "  Averages", "  Min", "  Max"))
            print(row.format("  ======", "  ========", "  ===", "  ==="))
            for i in range(-1,6):
                tot = point.format(days[i], counts[i])
                avg_value = 0 if tally[i] is 0 else counts[i]/tally[i]
                avg = point.format(days[i], avg_value)
                print(row.format(tot, avg))

            print()

            print(row.format("  Min", "  Max"))
            print(row.format("  ===", "  ==="))
            for i in range(-1,6):
                min_value = point.format(days[i], mins[i])
                max_value = point.format(days[i], maxs[i])
                print(row.format(min_value, max_value))


def display_plot(tracker):
    """Show plot for a tracker

    Input:
        tracker: tracker name to plot
    """
    if len(tracker) != 1:
        error("Only a single tracker can be plotted")
    else:
        tracker = tracker[0]
        if not tracker_exists(tracker):
            error("Cannot show stats for unknown tracker '" + tracker + "'")

        query = "SELECT * FROM TRACKERS where name=:tracker ORDER BY day ASC"
        cursor = db.execute(query, {"tracker": tracker})
        results = cursor.fetchall()

        # extract data for plotting
        dates = [r[1] for r in results]
        values = [v[2] for v in results]

        minY = min(values) * 0.75
        maxY = max(values) * 1.1

        data = [
            # give graph a size and title
            "set term dumb 79 25\n",
            "set title '{}'\n".format(tracker),

            # set date format for gnuplot
            "set xdata time\n",
            'set timefmt "%Y-%m-%d\n',

            # lazy scaling, won't work nicely for all data ranges
            'set yrange[{}:{}]\n'.format(minY, maxY),

            "plot '-' using 1:2 title '{}' with impulses\n".format(tracker)
        ]
        # plot data
        data.extend(["%s %f" % (d, v) for d, v in zip(dates, values)])
        data.append("exit")

        gnuplot = subprocess.Popen(["/usr/bin/gnuplot"], stdin=subprocess.PIPE)
        gnuplot.communicate("\n".join(data).encode("utf-8"))


def handle_command(args):
    """Handles execution of valid commands
    """
    command = args[0]
    # TODO handle all possible commands
    # Map to command's handler function
    # Remaining args are passed regardless, dealt with in handler
    handlers = {
        "update" : update_tracker,
        "list"   : display_list,
        "show"   : show_tracker,
        "delete" : delete_tracker,
        "stats"  : display_stats,
        "plot"   : display_plot
    }
    handlers[command](args[1:])


def validate_input():
    """Ensures user input contains valid commands
    """
    args = [arg.lower() for arg in sys.argv[1:]]

    # available commands
    # TODO consider consolidating with help(), handle_command
    commands = ["update", "list", "show", "delete", "stats", "plot"]

    if len(args) == 0:
        help()
    if args[0] in ["help", "usage"]:
        if len(args) > 2:
            error("Too many args provided for 'help'")
        elif len(args) == 2:
            help(args[1])
        else:
            help()
    if args[0] not in commands:
        error("Invalid command: '{}'".format(args[0]))

    handle_command(args)
    

if __name__ == '__main__':
    validate_input()
